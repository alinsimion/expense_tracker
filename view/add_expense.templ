package view

import (
	"fmt"
	"github.com/alinsimion/expense_tracker/model"
	"github.com/alinsimion/expense_tracker/util"
	"github.com/alinsimion/expense_tracker/view/layout"
	"time"
)

type AddExpenseParams struct {
	Id          int64
	Currency    string    `json:"currency"`
	Description string    `json:"description"`
	Amount      float64   `json:"amount"`
	Category    string    `json:"category"`
	Date        time.Time `json:"date"`
	ExpenseType string    `json:"expense_type"`
}

type AddExpenseErrors struct {
	Currency    string
	Description string
	Amount      string
	Category    string
	Date        string
}

templ AddExpenseForm(categories []string, addParams AddExpenseParams, addErrors AddExpenseErrors) {
	<div class="h-screen ">
		<div class="flex flex-row justify-center">
		
			<form class="max-w-sm w-full p-4" action={ templ.SafeURL(util.GetFullUrl("/expense/add")) } method="POST">
				<input id="edit_id" name="edit_id" type="text" class="hidden" value={ fmt.Sprintf("%d", addParams.Id) }/>
				<div class="mb-5">
					<label for="description" class="block mb-2 text-sm font-medium text-white">Description</label>
					<textarea
						placeholder="Expense short description"
						name="description"
						id="description"
						class="textarea textarea-bordered textarea-sm w-full "
					>
						{ addParams.Description }
					</textarea>
				</div>
				<div class="divider"></div>
				<label for="amount" class="block mb-2 text-sm font-medium text-white">Amount</label>
				<div class="flex join mb-5 ">
					<div class="w-full">
						<input
							type="number"
							step="0.01"
							min="0"
							name="amount"
							id="amount"
							placeholder="Enter the amount"
							class="input input-bordered join-item w-full text-sm"
							if addParams.Amount != 0 {
								value={ fmt.Sprintf("%.2f", addParams.Amount) }
							}
							
						/>
					</div>
					<select class="select select-bordered join-item" id="currency" name="currency">
						// <option disabled selected>Currency</option>
						<option selected?={ addParams.Currency=="RON" }>RON</option>
						<option selected?={ addParams.Currency=="EUR" }>EUR</option>
						<option selected?={ addParams.Currency=="USD" }>USD</option>
					</select>
				</div>
				<div class="divider"></div>
				<div class=" mb-5">
					<label for="categories" class="block mb-2 text-sm font-medium text-white">Category</label>
					<select id="categories" name="categories" class="select select-bordered w-full ">
						if addParams.Category != "" {
							for _, category := range categories {
								if category == addParams.Category {
									<option value={ category } selected>{ category }</option>
								} else {
									<option value={ category }>{ category }</option>
								}
							}
						} else {
							<option disabled selected>Pick a category</option>
							for _, category := range categories {
								<option value={ category }>{ category }</option>
							}
						}
					</select>
					<div class="divider">OR </div>
					
					<input type="category" name="category" id="category" placeholder="Enter a new category" class="input input-bordered w-full text-sm"/>

				</div>
				<div class="divider"></div>
				<label for="date" class="block text-sm font-medium text-white">Date</label>
				<div class="max-w-sm my-5">
					// <div class="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
					// 	<svg class="w-4 h-4 text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
					// 		<path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z"></path>
					// 	</svg>
					// </div>
					<input
						id="date"
						name="date"
						type="date"
						class="input input-bordered w-full text-sm"
						value={ fmt.Sprintf("%d-%02d-%02d", addParams.Date.Year(), int(addParams.Date.Month()), addParams.Date.Day()) }	
					/>
					
				</div>
				<div class="divider"></div>
				<div class="flex mx-10 my-5 justify-between">
					<label
						class="inline-block pl-[0.15rem] hover:cursor-pointer"
						for="flexSwitchCheckDefault"
					>
						Expense
					</label>
					
					<input
						class="mr-2 mt-[0.3rem] h-3.5 w-8 appearance-none rounded-[0.4375rem] bg-neutral-300 before:pointer-events-none before:absolute before:h-3.5 before:w-3.5 before:rounded-full before:bg-transparent before:content-[''] after:absolute after:z-[2] after:-mt-[0.1875rem] after:h-5 after:w-5 after:rounded-full after:border-none after:bg-neutral-100 after:shadow-[0_0px_3px_0_rgb(0_0_0_/_7%),_0_2px_2px_0_rgb(0_0_0_/_4%)] after:transition-[background-color_0.2s,transform_0.2s] after:content-[''] checked:bg-primary checked:after:absolute checked:after:z-[2] checked:after:-mt-[3px] checked:after:ml-[1.0625rem] checked:after:h-5 checked:after:w-5 checked:after:rounded-full checked:after:border-none checked:after:bg-primary checked:after:shadow-[0_3px_1px_-2px_rgba(0,0,0,0.2),_0_2px_2px_0_rgba(0,0,0,0.14),_0_1px_5px_0_rgba(0,0,0,0.12)] checked:after:transition-[background-color_0.2s,transform_0.2s] checked:after:content-[''] hover:cursor-pointer focus:outline-none focus:ring-0 focus:before:scale-100 focus:before:opacity-[0.12] focus:before:shadow-[3px_-1px_0px_13px_rgba(0,0,0,0.6)] focus:before:transition-[box-shadow_0.2s,transform_0.2s] focus:after:absolute focus:after:z-[1] focus:after:block focus:after:h-5 focus:after:w-5 focus:after:rounded-full focus:after:content-[''] checked:focus:border-primary checked:focus:bg-primary checked:focus:before:ml-[1.0625rem] checked:focus:before:scale-100 checked:focus:before:shadow-[3px_-1px_0px_13px_#3b71ca] checked:focus:before:transition-[box-shadow_0.2s,transform_0.2s] dark:bg-neutral-600 dark:after:bg-neutral-400 dark:checked:bg-primary dark:checked:after:bg-primary dark:focus:before:shadow-[3px_-1px_0px_13px_rgba(255,255,255,0.4)] dark:checked:focus:before:shadow-[3px_-1px_0px_13px_#3b71ca]"
						type="checkbox"
						role="switch"
						id="flexSwitchCheckDefault"
						name="type"
						checked?={addParams.ExpenseType==model.INCOME}
					/>
					
					<label
						class="inline-block pl-[0.15rem] hover:cursor-pointer"
						for="flexSwitchCheckDefault"
					>
						Income
					</label>
				</div>
				<div class="divider"></div>
				<button type="submit" class="btn btn-primary w-full">Add Expense</button>

				<div class="mt-10 mb-10">
				</div>
			</form>
		</div>
	</div>
}

templ ShowAddExpenseForm(categories []string, addParams AddExpenseParams, addErrors AddExpenseErrors) {
	@layout.Base("Add Expense") {
		@AddExpenseForm(categories, addParams, addErrors)
	}
}
